// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/edenreich/n8n-cli/n8n"
)

type FakeClientInterface struct {
	ActivateWorkflowStub        func(string) (*n8n.Workflow, error)
	activateWorkflowMutex       sync.RWMutex
	activateWorkflowArgsForCall []struct {
		arg1 string
	}
	activateWorkflowReturns struct {
		result1 *n8n.Workflow
		result2 error
	}
	activateWorkflowReturnsOnCall map[int]struct {
		result1 *n8n.Workflow
		result2 error
	}
	GetWorkflowsStub        func() (*n8n.WorkflowList, error)
	getWorkflowsMutex       sync.RWMutex
	getWorkflowsArgsForCall []struct {
	}
	getWorkflowsReturns struct {
		result1 *n8n.WorkflowList
		result2 error
	}
	getWorkflowsReturnsOnCall map[int]struct {
		result1 *n8n.WorkflowList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientInterface) ActivateWorkflow(arg1 string) (*n8n.Workflow, error) {
	fake.activateWorkflowMutex.Lock()
	ret, specificReturn := fake.activateWorkflowReturnsOnCall[len(fake.activateWorkflowArgsForCall)]
	fake.activateWorkflowArgsForCall = append(fake.activateWorkflowArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ActivateWorkflowStub
	fakeReturns := fake.activateWorkflowReturns
	fake.recordInvocation("ActivateWorkflow", []interface{}{arg1})
	fake.activateWorkflowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClientInterface) ActivateWorkflowCallCount() int {
	fake.activateWorkflowMutex.RLock()
	defer fake.activateWorkflowMutex.RUnlock()
	return len(fake.activateWorkflowArgsForCall)
}

func (fake *FakeClientInterface) ActivateWorkflowCalls(stub func(string) (*n8n.Workflow, error)) {
	fake.activateWorkflowMutex.Lock()
	defer fake.activateWorkflowMutex.Unlock()
	fake.ActivateWorkflowStub = stub
}

func (fake *FakeClientInterface) ActivateWorkflowArgsForCall(i int) string {
	fake.activateWorkflowMutex.RLock()
	defer fake.activateWorkflowMutex.RUnlock()
	argsForCall := fake.activateWorkflowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClientInterface) ActivateWorkflowReturns(result1 *n8n.Workflow, result2 error) {
	fake.activateWorkflowMutex.Lock()
	defer fake.activateWorkflowMutex.Unlock()
	fake.ActivateWorkflowStub = nil
	fake.activateWorkflowReturns = struct {
		result1 *n8n.Workflow
		result2 error
	}{result1, result2}
}

func (fake *FakeClientInterface) ActivateWorkflowReturnsOnCall(i int, result1 *n8n.Workflow, result2 error) {
	fake.activateWorkflowMutex.Lock()
	defer fake.activateWorkflowMutex.Unlock()
	fake.ActivateWorkflowStub = nil
	if fake.activateWorkflowReturnsOnCall == nil {
		fake.activateWorkflowReturnsOnCall = make(map[int]struct {
			result1 *n8n.Workflow
			result2 error
		})
	}
	fake.activateWorkflowReturnsOnCall[i] = struct {
		result1 *n8n.Workflow
		result2 error
	}{result1, result2}
}

func (fake *FakeClientInterface) GetWorkflows() (*n8n.WorkflowList, error) {
	fake.getWorkflowsMutex.Lock()
	ret, specificReturn := fake.getWorkflowsReturnsOnCall[len(fake.getWorkflowsArgsForCall)]
	fake.getWorkflowsArgsForCall = append(fake.getWorkflowsArgsForCall, struct {
	}{})
	stub := fake.GetWorkflowsStub
	fakeReturns := fake.getWorkflowsReturns
	fake.recordInvocation("GetWorkflows", []interface{}{})
	fake.getWorkflowsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClientInterface) GetWorkflowsCallCount() int {
	fake.getWorkflowsMutex.RLock()
	defer fake.getWorkflowsMutex.RUnlock()
	return len(fake.getWorkflowsArgsForCall)
}

func (fake *FakeClientInterface) GetWorkflowsCalls(stub func() (*n8n.WorkflowList, error)) {
	fake.getWorkflowsMutex.Lock()
	defer fake.getWorkflowsMutex.Unlock()
	fake.GetWorkflowsStub = stub
}

func (fake *FakeClientInterface) GetWorkflowsReturns(result1 *n8n.WorkflowList, result2 error) {
	fake.getWorkflowsMutex.Lock()
	defer fake.getWorkflowsMutex.Unlock()
	fake.GetWorkflowsStub = nil
	fake.getWorkflowsReturns = struct {
		result1 *n8n.WorkflowList
		result2 error
	}{result1, result2}
}

func (fake *FakeClientInterface) GetWorkflowsReturnsOnCall(i int, result1 *n8n.WorkflowList, result2 error) {
	fake.getWorkflowsMutex.Lock()
	defer fake.getWorkflowsMutex.Unlock()
	fake.GetWorkflowsStub = nil
	if fake.getWorkflowsReturnsOnCall == nil {
		fake.getWorkflowsReturnsOnCall = make(map[int]struct {
			result1 *n8n.WorkflowList
			result2 error
		})
	}
	fake.getWorkflowsReturnsOnCall[i] = struct {
		result1 *n8n.WorkflowList
		result2 error
	}{result1, result2}
}

func (fake *FakeClientInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateWorkflowMutex.RLock()
	defer fake.activateWorkflowMutex.RUnlock()
	fake.getWorkflowsMutex.RLock()
	defer fake.getWorkflowsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ n8n.ClientInterface = new(FakeClientInterface)
