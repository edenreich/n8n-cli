// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/edenreich/n8n-cli/config"
)

type FakeConfigInterface struct {
	GetAPIBaseURLStub        func() string
	getAPIBaseURLMutex       sync.RWMutex
	getAPIBaseURLArgsForCall []struct {
	}
	getAPIBaseURLReturns struct {
		result1 string
	}
	getAPIBaseURLReturnsOnCall map[int]struct {
		result1 string
	}
	GetAPITokenStub        func() string
	getAPITokenMutex       sync.RWMutex
	getAPITokenArgsForCall []struct {
	}
	getAPITokenReturns struct {
		result1 string
	}
	getAPITokenReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigInterface) GetAPIBaseURL() string {
	fake.getAPIBaseURLMutex.Lock()
	ret, specificReturn := fake.getAPIBaseURLReturnsOnCall[len(fake.getAPIBaseURLArgsForCall)]
	fake.getAPIBaseURLArgsForCall = append(fake.getAPIBaseURLArgsForCall, struct {
	}{})
	stub := fake.GetAPIBaseURLStub
	fakeReturns := fake.getAPIBaseURLReturns
	fake.recordInvocation("GetAPIBaseURL", []interface{}{})
	fake.getAPIBaseURLMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigInterface) GetAPIBaseURLCallCount() int {
	fake.getAPIBaseURLMutex.RLock()
	defer fake.getAPIBaseURLMutex.RUnlock()
	return len(fake.getAPIBaseURLArgsForCall)
}

func (fake *FakeConfigInterface) GetAPIBaseURLCalls(stub func() string) {
	fake.getAPIBaseURLMutex.Lock()
	defer fake.getAPIBaseURLMutex.Unlock()
	fake.GetAPIBaseURLStub = stub
}

func (fake *FakeConfigInterface) GetAPIBaseURLReturns(result1 string) {
	fake.getAPIBaseURLMutex.Lock()
	defer fake.getAPIBaseURLMutex.Unlock()
	fake.GetAPIBaseURLStub = nil
	fake.getAPIBaseURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigInterface) GetAPIBaseURLReturnsOnCall(i int, result1 string) {
	fake.getAPIBaseURLMutex.Lock()
	defer fake.getAPIBaseURLMutex.Unlock()
	fake.GetAPIBaseURLStub = nil
	if fake.getAPIBaseURLReturnsOnCall == nil {
		fake.getAPIBaseURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAPIBaseURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigInterface) GetAPIToken() string {
	fake.getAPITokenMutex.Lock()
	ret, specificReturn := fake.getAPITokenReturnsOnCall[len(fake.getAPITokenArgsForCall)]
	fake.getAPITokenArgsForCall = append(fake.getAPITokenArgsForCall, struct {
	}{})
	stub := fake.GetAPITokenStub
	fakeReturns := fake.getAPITokenReturns
	fake.recordInvocation("GetAPIToken", []interface{}{})
	fake.getAPITokenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigInterface) GetAPITokenCallCount() int {
	fake.getAPITokenMutex.RLock()
	defer fake.getAPITokenMutex.RUnlock()
	return len(fake.getAPITokenArgsForCall)
}

func (fake *FakeConfigInterface) GetAPITokenCalls(stub func() string) {
	fake.getAPITokenMutex.Lock()
	defer fake.getAPITokenMutex.Unlock()
	fake.GetAPITokenStub = stub
}

func (fake *FakeConfigInterface) GetAPITokenReturns(result1 string) {
	fake.getAPITokenMutex.Lock()
	defer fake.getAPITokenMutex.Unlock()
	fake.GetAPITokenStub = nil
	fake.getAPITokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigInterface) GetAPITokenReturnsOnCall(i int, result1 string) {
	fake.getAPITokenMutex.Lock()
	defer fake.getAPITokenMutex.Unlock()
	fake.GetAPITokenStub = nil
	if fake.getAPITokenReturnsOnCall == nil {
		fake.getAPITokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAPITokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAPIBaseURLMutex.RLock()
	defer fake.getAPIBaseURLMutex.RUnlock()
	fake.getAPITokenMutex.RLock()
	defer fake.getAPITokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.ConfigInterface = new(FakeConfigInterface)
